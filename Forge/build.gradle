plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+' // Mixins
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

archivesBaseName = "${mod_name}-forge-${minecraft_version}"

minecraft {
    mappings channel: mappings_channel, version: "${mappings_version}-${minecraft_version}"
    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            args "-mixin.config="+mod_id+".mixins.json"

            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            args "-mixin.config="+mod_id+".mixins.json"

            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

mixin { // Add mixins refmap
    add sourceSets.main, "${mod_id}.refmap.json"
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly project(":Common")
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

sourcesJar {
    from(project(":Common").sourceSets.main.allSource)
}

processResources {
    var replaceProperties = [
            mod_id: mod_id,
            mod_name: mod_name,
            mod_version: version,
            minecraft_version: minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version: forge_version,
            forge_version_range: forge_version_range,
            loader_version_range: forge_loader_version_range
    ]

    from project(":Common").sourceSets.main.resources
    inputs.properties replaceProperties

    filesMatching('META-INF/mods.toml') {
        expand replaceProperties + [project: project]
    }

    exclude '**/*.accesswidener'
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'              : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On-Minecraft'      : minecraft_version,
                "MixinConfigs": "${mod_id}.mixins.json"
        ])
    }

    finalizedBy 'reobfJar'
}